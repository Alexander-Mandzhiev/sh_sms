services:
  sso_database:
    container_name: sso_database
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${SSO_DB_NAME}
      POSTGRES_USER: ${SSO_DB_USER}
      POSTGRES_PASSWORD: ${SSO_DB_PASSWORD}
    volumes:
      - sso_init:/docker-entrypoint-initdb.d
      - sso_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SSO_DB_USER} -d ${SSO_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  apps_database:
    container_name: apps_database
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${APPS_DB_NAME}
      POSTGRES_USER: ${APPS_DB_USER}
      POSTGRES_PASSWORD: ${APPS_DB_PASSWORD}
    volumes:
      - apps_init:/docker-entrypoint-initdb.d
      - apps_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${APPS_DB_USER} -d ${APPS_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  client_database:
    container_name: client_database
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${CLIENTS_DB_NAME}
      POSTGRES_USER: ${CLIENTS_DB_USER}
      POSTGRES_PASSWORD: ${CLIENTS_DB_PASSWORD}
    volumes:
      - clients_init:/docker-entrypoint-initdb.d
      - clients_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${CLIENTS_DB_USER} -d ${CLIENTS_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  auth_database:
    container_name: auth_database
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - auth_init:/docker-entrypoint-initdb.d
      - auth_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  library_database:
    container_name: library_database
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${LIB_DB_NAME}
      POSTGRES_USER: ${LIB_DB_USER}
      POSTGRES_PASSWORD: ${LIB_DB_PASSWORD}
    volumes:
      - lib_init:/docker-entrypoint-initdb.d
      - lib_data:/var/lib/postgresql/data
    ports:
      - "5437:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${LIB_DB_USER} -d ${LIB_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - sso_database
      - apps_database
      - client_database

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  apps_init:
  apps_data:
  sso_init:
  sso_data:
  clients_init:
  clients_data:
  auth_init:
  auth_data:
  lib_init:
  lib_data:
  media-data:
  grafana-storage:

networks:
  app-network:
    driver: bridge