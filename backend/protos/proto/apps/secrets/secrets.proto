syntax = "proto3";

package apps.secrets;
option go_package = "apps.secrets.v1;secrets";

import "google/protobuf/timestamp.proto";

service SecretService {
  rpc Generate(CreateRequest) returns (Secret);
  rpc Get(GetRequest) returns (Secret);
  rpc Rotate(RotateRequest) returns (Secret);
  rpc Revoke(RevokeRequest) returns (Secret);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc List(ListRequest) returns (ListResponse);
}

message Secret {
  string client_id = 1;        // UUID format
  int32 app_id = 2;
  string secret_type = 3;      // "access" или "refresh" (нижний регистр)
  string current_secret = 4;
  string algorithm = 5;        // Дефолт: bcrypt
  int32 secret_version = 6;
  google.protobuf.Timestamp generated_at = 7;
  google.protobuf.Timestamp revoked_at = 8;
}

// Generate (ранее Create)
message CreateRequest {
  string client_id = 1;
  int32 app_id = 2;
  string secret_type = 3;      // Валидация в коде: access/refresh
  optional string algorithm = 4;
}

// Read
message GetRequest {
  string client_id = 1;
  int32 app_id = 2;
  string secret_type = 3;
}

// Rotate
message RotateRequest {
  string client_id = 1;
  int32 app_id = 2;
  string secret_type = 3;
  string rotated_by = 4;
}

// Revoke
message RevokeRequest {
  string client_id = 1;
  int32 app_id = 2;
  string secret_type = 3;
}

// Delete
message DeleteRequest {
  string client_id = 1;
  int32 app_id = 2;
  string secret_type = 3;
}

message DeleteResponse {
  bool success = 1;
}

// List
message ListRequest {
  message Filter {
    optional string client_id = 1;
    optional int32 app_id = 2;
    optional string secret_type = 3;
    optional bool active_only = 4;
  }

  int32 page = 1;
  int32 count = 2;
  Filter filter = 3;
}

message ListResponse {
  repeated Secret secrets = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 count = 4;
}