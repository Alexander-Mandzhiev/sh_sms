syntax = "proto3";
package sso.users;
option go_package = "sso.users.v1;users";

import "google/protobuf/timestamp.proto";

service UserService {
  rpc CreateUser (CreateRequest) returns (UserResponse);
  rpc GetUser (GetRequest) returns (UserResponse);
  rpc UpdateUser (UpdateRequest) returns (UserResponse);
  rpc DeleteUser (DeleteRequest) returns (DeleteResponse);
  rpc ListUsers (ListRequest) returns (ListResponse);
}

message User {
  string id = 1;                  // UUID пользователя
  string tenant_id = 2;           // UUID арендатора (обязательно)
  string email = 3;               // Уникальный в рамках tenant
  optional string full_name = 4;
  optional string phone = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  optional google.protobuf.Timestamp deleted_at = 8;
}

message UserResponse {
  User user = 1;
}

message CreateRequest {
  string tenant_id = 1;          // Обязательный tenant
  string email = 2;              // Логин пользователя
  string password = 3;           // Пароль (хэшируется на сервере)
  optional string full_name = 4;
  optional string phone = 5;
}

message GetRequest {
  string tenant_id = 1;          // Контекст арендатора
  oneof identifier {
    string id = 2;               // Поиск по UUID
    string email = 3;            // Поиск по email + tenant_id
  }
}

message UpdateRequest {
  string id = 1;
  string tenant_id = 2;          // Для верификации принадлежности
  optional string email = 3;
  optional string full_name = 4;
  optional string phone = 5;
  optional string password = 6;  // Обновление пароля
}

message DeleteRequest {
  string id = 1;
  string tenant_id = 2;          // Подтверждение контекста
}

message DeleteResponse {
  bool success = 1;
  google.protobuf.Timestamp deleted_at = 2;
}

message ListRequest {
  string tenant_id = 1;          // Обязательный фильтр
  int32 page = 2;                // Номер страницы (начиная с 1)
  int32 page_size = 3;           // Количество элементов (1-100)
  bool include_deleted = 4;      // Включать удаленных
}

message ListResponse {
  repeated User users = 1;
  int32 total_count = 2;         // Общее количество
  int32 page = 3;
  int32 page_size = 4;
}