// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: sso/roles_permissions/roles_permissions.proto

package role_permissions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RolePermissionService_AddPermission_FullMethodName    = "/sso.role_permissions.RolePermissionService/AddPermission"
	RolePermissionService_RemovePermission_FullMethodName = "/sso.role_permissions.RolePermissionService/RemovePermission"
	RolePermissionService_ListPermissions_FullMethodName  = "/sso.role_permissions.RolePermissionService/ListPermissions"
)

// RolePermissionServiceClient is the client API for RolePermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolePermissionServiceClient interface {
	AddPermission(ctx context.Context, in *RolePermissionRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	RemovePermission(ctx context.Context, in *RolePermissionRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	ListPermissions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type rolePermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolePermissionServiceClient(cc grpc.ClientConnInterface) RolePermissionServiceClient {
	return &rolePermissionServiceClient{cc}
}

func (c *rolePermissionServiceClient) AddPermission(ctx context.Context, in *RolePermissionRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, RolePermissionService_AddPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolePermissionServiceClient) RemovePermission(ctx context.Context, in *RolePermissionRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, RolePermissionService_RemovePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolePermissionServiceClient) ListPermissions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, RolePermissionService_ListPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolePermissionServiceServer is the server API for RolePermissionService service.
// All implementations must embed UnimplementedRolePermissionServiceServer
// for forward compatibility.
type RolePermissionServiceServer interface {
	AddPermission(context.Context, *RolePermissionRequest) (*OperationResponse, error)
	RemovePermission(context.Context, *RolePermissionRequest) (*OperationResponse, error)
	ListPermissions(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedRolePermissionServiceServer()
}

// UnimplementedRolePermissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRolePermissionServiceServer struct{}

func (UnimplementedRolePermissionServiceServer) AddPermission(context.Context, *RolePermissionRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermission not implemented")
}
func (UnimplementedRolePermissionServiceServer) RemovePermission(context.Context, *RolePermissionRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermission not implemented")
}
func (UnimplementedRolePermissionServiceServer) ListPermissions(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedRolePermissionServiceServer) mustEmbedUnimplementedRolePermissionServiceServer() {}
func (UnimplementedRolePermissionServiceServer) testEmbeddedByValue()                               {}

// UnsafeRolePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolePermissionServiceServer will
// result in compilation errors.
type UnsafeRolePermissionServiceServer interface {
	mustEmbedUnimplementedRolePermissionServiceServer()
}

func RegisterRolePermissionServiceServer(s grpc.ServiceRegistrar, srv RolePermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRolePermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RolePermissionService_ServiceDesc, srv)
}

func _RolePermissionService_AddPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionServiceServer).AddPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissionService_AddPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionServiceServer).AddPermission(ctx, req.(*RolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolePermissionService_RemovePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionServiceServer).RemovePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissionService_RemovePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionServiceServer).RemovePermission(ctx, req.(*RolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolePermissionService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolePermissionService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionServiceServer).ListPermissions(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolePermissionService_ServiceDesc is the grpc.ServiceDesc for RolePermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolePermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.role_permissions.RolePermissionService",
	HandlerType: (*RolePermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPermission",
			Handler:    _RolePermissionService_AddPermission_Handler,
		},
		{
			MethodName: "RemovePermission",
			Handler:    _RolePermissionService_RemovePermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _RolePermissionService_ListPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/roles_permissions/roles_permissions.proto",
}
