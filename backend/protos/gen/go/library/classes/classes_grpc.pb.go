// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: library/classes/classes.proto

package classes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClassesService_CreateClass_FullMethodName = "/library.ClassesService/CreateClass"
	ClassesService_GetClass_FullMethodName    = "/library.ClassesService/GetClass"
	ClassesService_UpdateClass_FullMethodName = "/library.ClassesService/UpdateClass"
	ClassesService_DeleteClass_FullMethodName = "/library.ClassesService/DeleteClass"
	ClassesService_ListClasses_FullMethodName = "/library.ClassesService/ListClasses"
)

// ClassesServiceClient is the client API for ClassesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassesServiceClient interface {
	CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*Class, error)
	GetClass(ctx context.Context, in *GetClassRequest, opts ...grpc.CallOption) (*Class, error)
	UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*Class, error)
	DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*DeleteClassResponse, error)
	ListClasses(ctx context.Context, in *ListClassesRequest, opts ...grpc.CallOption) (*ListClassesResponse, error)
}

type classesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassesServiceClient(cc grpc.ClientConnInterface) ClassesServiceClient {
	return &classesServiceClient{cc}
}

func (c *classesServiceClient) CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*Class, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Class)
	err := c.cc.Invoke(ctx, ClassesService_CreateClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesServiceClient) GetClass(ctx context.Context, in *GetClassRequest, opts ...grpc.CallOption) (*Class, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Class)
	err := c.cc.Invoke(ctx, ClassesService_GetClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesServiceClient) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*Class, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Class)
	err := c.cc.Invoke(ctx, ClassesService_UpdateClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesServiceClient) DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*DeleteClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClassResponse)
	err := c.cc.Invoke(ctx, ClassesService_DeleteClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesServiceClient) ListClasses(ctx context.Context, in *ListClassesRequest, opts ...grpc.CallOption) (*ListClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClassesResponse)
	err := c.cc.Invoke(ctx, ClassesService_ListClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassesServiceServer is the server API for ClassesService service.
// All implementations must embed UnimplementedClassesServiceServer
// for forward compatibility.
type ClassesServiceServer interface {
	CreateClass(context.Context, *CreateClassRequest) (*Class, error)
	GetClass(context.Context, *GetClassRequest) (*Class, error)
	UpdateClass(context.Context, *UpdateClassRequest) (*Class, error)
	DeleteClass(context.Context, *DeleteClassRequest) (*DeleteClassResponse, error)
	ListClasses(context.Context, *ListClassesRequest) (*ListClassesResponse, error)
	mustEmbedUnimplementedClassesServiceServer()
}

// UnimplementedClassesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClassesServiceServer struct{}

func (UnimplementedClassesServiceServer) CreateClass(context.Context, *CreateClassRequest) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}
func (UnimplementedClassesServiceServer) GetClass(context.Context, *GetClassRequest) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClass not implemented")
}
func (UnimplementedClassesServiceServer) UpdateClass(context.Context, *UpdateClassRequest) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedClassesServiceServer) DeleteClass(context.Context, *DeleteClassRequest) (*DeleteClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClass not implemented")
}
func (UnimplementedClassesServiceServer) ListClasses(context.Context, *ListClassesRequest) (*ListClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClasses not implemented")
}
func (UnimplementedClassesServiceServer) mustEmbedUnimplementedClassesServiceServer() {}
func (UnimplementedClassesServiceServer) testEmbeddedByValue()                        {}

// UnsafeClassesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassesServiceServer will
// result in compilation errors.
type UnsafeClassesServiceServer interface {
	mustEmbedUnimplementedClassesServiceServer()
}

func RegisterClassesServiceServer(s grpc.ServiceRegistrar, srv ClassesServiceServer) {
	// If the following call pancis, it indicates UnimplementedClassesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClassesService_ServiceDesc, srv)
}

func _ClassesService_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServiceServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassesService_CreateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServiceServer).CreateClass(ctx, req.(*CreateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassesService_GetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServiceServer).GetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassesService_GetClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServiceServer).GetClass(ctx, req.(*GetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassesService_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServiceServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassesService_UpdateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServiceServer).UpdateClass(ctx, req.(*UpdateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassesService_DeleteClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServiceServer).DeleteClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassesService_DeleteClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServiceServer).DeleteClass(ctx, req.(*DeleteClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassesService_ListClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServiceServer).ListClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassesService_ListClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServiceServer).ListClasses(ctx, req.(*ListClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassesService_ServiceDesc is the grpc.ServiceDesc for ClassesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.ClassesService",
	HandlerType: (*ClassesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClass",
			Handler:    _ClassesService_CreateClass_Handler,
		},
		{
			MethodName: "GetClass",
			Handler:    _ClassesService_GetClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _ClassesService_UpdateClass_Handler,
		},
		{
			MethodName: "DeleteClass",
			Handler:    _ClassesService_DeleteClass_Handler,
		},
		{
			MethodName: "ListClasses",
			Handler:    _ClassesService_ListClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library/classes/classes.proto",
}
