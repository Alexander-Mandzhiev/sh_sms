// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: library/subjects/subjects.proto

package subjects

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubjectsService_CreateSubject_FullMethodName = "/library.subjects.SubjectsService/CreateSubject"
	SubjectsService_GetSubject_FullMethodName    = "/library.subjects.SubjectsService/GetSubject"
	SubjectsService_UpdateSubject_FullMethodName = "/library.subjects.SubjectsService/UpdateSubject"
	SubjectsService_DeleteSubject_FullMethodName = "/library.subjects.SubjectsService/DeleteSubject"
	SubjectsService_ListSubjects_FullMethodName  = "/library.subjects.SubjectsService/ListSubjects"
)

// SubjectsServiceClient is the client API for SubjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Subjects Service
type SubjectsServiceClient interface {
	CreateSubject(ctx context.Context, in *CreateSubjectRequest, opts ...grpc.CallOption) (*Subject, error)
	GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...grpc.CallOption) (*Subject, error)
	UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*Subject, error)
	DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*DeleteSubjectResponse, error)
	ListSubjects(ctx context.Context, in *ListSubjectsRequest, opts ...grpc.CallOption) (*ListSubjectsResponse, error)
}

type subjectsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectsServiceClient(cc grpc.ClientConnInterface) SubjectsServiceClient {
	return &subjectsServiceClient{cc}
}

func (c *subjectsServiceClient) CreateSubject(ctx context.Context, in *CreateSubjectRequest, opts ...grpc.CallOption) (*Subject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subject)
	err := c.cc.Invoke(ctx, SubjectsService_CreateSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectsServiceClient) GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...grpc.CallOption) (*Subject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subject)
	err := c.cc.Invoke(ctx, SubjectsService_GetSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectsServiceClient) UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*Subject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subject)
	err := c.cc.Invoke(ctx, SubjectsService_UpdateSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectsServiceClient) DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*DeleteSubjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubjectResponse)
	err := c.cc.Invoke(ctx, SubjectsService_DeleteSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectsServiceClient) ListSubjects(ctx context.Context, in *ListSubjectsRequest, opts ...grpc.CallOption) (*ListSubjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubjectsResponse)
	err := c.cc.Invoke(ctx, SubjectsService_ListSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectsServiceServer is the server API for SubjectsService service.
// All implementations must embed UnimplementedSubjectsServiceServer
// for forward compatibility.
//
// Subjects Service
type SubjectsServiceServer interface {
	CreateSubject(context.Context, *CreateSubjectRequest) (*Subject, error)
	GetSubject(context.Context, *GetSubjectRequest) (*Subject, error)
	UpdateSubject(context.Context, *UpdateSubjectRequest) (*Subject, error)
	DeleteSubject(context.Context, *DeleteSubjectRequest) (*DeleteSubjectResponse, error)
	ListSubjects(context.Context, *ListSubjectsRequest) (*ListSubjectsResponse, error)
	mustEmbedUnimplementedSubjectsServiceServer()
}

// UnimplementedSubjectsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubjectsServiceServer struct{}

func (UnimplementedSubjectsServiceServer) CreateSubject(context.Context, *CreateSubjectRequest) (*Subject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubject not implemented")
}
func (UnimplementedSubjectsServiceServer) GetSubject(context.Context, *GetSubjectRequest) (*Subject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubject not implemented")
}
func (UnimplementedSubjectsServiceServer) UpdateSubject(context.Context, *UpdateSubjectRequest) (*Subject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubject not implemented")
}
func (UnimplementedSubjectsServiceServer) DeleteSubject(context.Context, *DeleteSubjectRequest) (*DeleteSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubject not implemented")
}
func (UnimplementedSubjectsServiceServer) ListSubjects(context.Context, *ListSubjectsRequest) (*ListSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjects not implemented")
}
func (UnimplementedSubjectsServiceServer) mustEmbedUnimplementedSubjectsServiceServer() {}
func (UnimplementedSubjectsServiceServer) testEmbeddedByValue()                         {}

// UnsafeSubjectsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectsServiceServer will
// result in compilation errors.
type UnsafeSubjectsServiceServer interface {
	mustEmbedUnimplementedSubjectsServiceServer()
}

func RegisterSubjectsServiceServer(s grpc.ServiceRegistrar, srv SubjectsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubjectsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubjectsService_ServiceDesc, srv)
}

func _SubjectsService_CreateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectsServiceServer).CreateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectsService_CreateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectsServiceServer).CreateSubject(ctx, req.(*CreateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectsService_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectsServiceServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectsService_GetSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectsServiceServer).GetSubject(ctx, req.(*GetSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectsService_UpdateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectsServiceServer).UpdateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectsService_UpdateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectsServiceServer).UpdateSubject(ctx, req.(*UpdateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectsService_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectsServiceServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectsService_DeleteSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectsServiceServer).DeleteSubject(ctx, req.(*DeleteSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectsService_ListSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectsServiceServer).ListSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectsService_ListSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectsServiceServer).ListSubjects(ctx, req.(*ListSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubjectsService_ServiceDesc is the grpc.ServiceDesc for SubjectsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubjectsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.subjects.SubjectsService",
	HandlerType: (*SubjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubject",
			Handler:    _SubjectsService_CreateSubject_Handler,
		},
		{
			MethodName: "GetSubject",
			Handler:    _SubjectsService_GetSubject_Handler,
		},
		{
			MethodName: "UpdateSubject",
			Handler:    _SubjectsService_UpdateSubject_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _SubjectsService_DeleteSubject_Handler,
		},
		{
			MethodName: "ListSubjects",
			Handler:    _SubjectsService_ListSubjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library/subjects/subjects.proto",
}
