// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: library/attachment_types/attachment_types.proto

package attachment_types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttachmentTypesService_CreateAttachmentType_FullMethodName = "/library.attachment_types.AttachmentTypesService/CreateAttachmentType"
	AttachmentTypesService_GetAttachmentType_FullMethodName    = "/library.attachment_types.AttachmentTypesService/GetAttachmentType"
	AttachmentTypesService_UpdateAttachmentType_FullMethodName = "/library.attachment_types.AttachmentTypesService/UpdateAttachmentType"
	AttachmentTypesService_DeleteAttachmentType_FullMethodName = "/library.attachment_types.AttachmentTypesService/DeleteAttachmentType"
	AttachmentTypesService_ListAttachmentTypes_FullMethodName  = "/library.attachment_types.AttachmentTypesService/ListAttachmentTypes"
)

// AttachmentTypesServiceClient is the client API for AttachmentTypesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentTypesServiceClient interface {
	CreateAttachmentType(ctx context.Context, in *CreateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentType, error)
	GetAttachmentType(ctx context.Context, in *GetAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentType, error)
	UpdateAttachmentType(ctx context.Context, in *UpdateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentType, error)
	DeleteAttachmentType(ctx context.Context, in *DeleteAttachmentTypeRequest, opts ...grpc.CallOption) (*DeleteAttachmentTypeResponse, error)
	ListAttachmentTypes(ctx context.Context, in *ListAttachmentTypesRequest, opts ...grpc.CallOption) (*ListAttachmentTypesResponse, error)
}

type attachmentTypesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentTypesServiceClient(cc grpc.ClientConnInterface) AttachmentTypesServiceClient {
	return &attachmentTypesServiceClient{cc}
}

func (c *attachmentTypesServiceClient) CreateAttachmentType(ctx context.Context, in *CreateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentType)
	err := c.cc.Invoke(ctx, AttachmentTypesService_CreateAttachmentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesServiceClient) GetAttachmentType(ctx context.Context, in *GetAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentType)
	err := c.cc.Invoke(ctx, AttachmentTypesService_GetAttachmentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesServiceClient) UpdateAttachmentType(ctx context.Context, in *UpdateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentType)
	err := c.cc.Invoke(ctx, AttachmentTypesService_UpdateAttachmentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesServiceClient) DeleteAttachmentType(ctx context.Context, in *DeleteAttachmentTypeRequest, opts ...grpc.CallOption) (*DeleteAttachmentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAttachmentTypeResponse)
	err := c.cc.Invoke(ctx, AttachmentTypesService_DeleteAttachmentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesServiceClient) ListAttachmentTypes(ctx context.Context, in *ListAttachmentTypesRequest, opts ...grpc.CallOption) (*ListAttachmentTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttachmentTypesResponse)
	err := c.cc.Invoke(ctx, AttachmentTypesService_ListAttachmentTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentTypesServiceServer is the server API for AttachmentTypesService service.
// All implementations must embed UnimplementedAttachmentTypesServiceServer
// for forward compatibility.
type AttachmentTypesServiceServer interface {
	CreateAttachmentType(context.Context, *CreateAttachmentTypeRequest) (*AttachmentType, error)
	GetAttachmentType(context.Context, *GetAttachmentTypeRequest) (*AttachmentType, error)
	UpdateAttachmentType(context.Context, *UpdateAttachmentTypeRequest) (*AttachmentType, error)
	DeleteAttachmentType(context.Context, *DeleteAttachmentTypeRequest) (*DeleteAttachmentTypeResponse, error)
	ListAttachmentTypes(context.Context, *ListAttachmentTypesRequest) (*ListAttachmentTypesResponse, error)
	mustEmbedUnimplementedAttachmentTypesServiceServer()
}

// UnimplementedAttachmentTypesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttachmentTypesServiceServer struct{}

func (UnimplementedAttachmentTypesServiceServer) CreateAttachmentType(context.Context, *CreateAttachmentTypeRequest) (*AttachmentType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachmentType not implemented")
}
func (UnimplementedAttachmentTypesServiceServer) GetAttachmentType(context.Context, *GetAttachmentTypeRequest) (*AttachmentType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachmentType not implemented")
}
func (UnimplementedAttachmentTypesServiceServer) UpdateAttachmentType(context.Context, *UpdateAttachmentTypeRequest) (*AttachmentType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachmentType not implemented")
}
func (UnimplementedAttachmentTypesServiceServer) DeleteAttachmentType(context.Context, *DeleteAttachmentTypeRequest) (*DeleteAttachmentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachmentType not implemented")
}
func (UnimplementedAttachmentTypesServiceServer) ListAttachmentTypes(context.Context, *ListAttachmentTypesRequest) (*ListAttachmentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachmentTypes not implemented")
}
func (UnimplementedAttachmentTypesServiceServer) mustEmbedUnimplementedAttachmentTypesServiceServer() {
}
func (UnimplementedAttachmentTypesServiceServer) testEmbeddedByValue() {}

// UnsafeAttachmentTypesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentTypesServiceServer will
// result in compilation errors.
type UnsafeAttachmentTypesServiceServer interface {
	mustEmbedUnimplementedAttachmentTypesServiceServer()
}

func RegisterAttachmentTypesServiceServer(s grpc.ServiceRegistrar, srv AttachmentTypesServiceServer) {
	// If the following call pancis, it indicates UnimplementedAttachmentTypesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AttachmentTypesService_ServiceDesc, srv)
}

func _AttachmentTypesService_CreateAttachmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesServiceServer).CreateAttachmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesService_CreateAttachmentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesServiceServer).CreateAttachmentType(ctx, req.(*CreateAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesService_GetAttachmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesServiceServer).GetAttachmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesService_GetAttachmentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesServiceServer).GetAttachmentType(ctx, req.(*GetAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesService_UpdateAttachmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesServiceServer).UpdateAttachmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesService_UpdateAttachmentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesServiceServer).UpdateAttachmentType(ctx, req.(*UpdateAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesService_DeleteAttachmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesServiceServer).DeleteAttachmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesService_DeleteAttachmentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesServiceServer).DeleteAttachmentType(ctx, req.(*DeleteAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesService_ListAttachmentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesServiceServer).ListAttachmentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesService_ListAttachmentTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesServiceServer).ListAttachmentTypes(ctx, req.(*ListAttachmentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachmentTypesService_ServiceDesc is the grpc.ServiceDesc for AttachmentTypesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentTypesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.attachment_types.AttachmentTypesService",
	HandlerType: (*AttachmentTypesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttachmentType",
			Handler:    _AttachmentTypesService_CreateAttachmentType_Handler,
		},
		{
			MethodName: "GetAttachmentType",
			Handler:    _AttachmentTypesService_GetAttachmentType_Handler,
		},
		{
			MethodName: "UpdateAttachmentType",
			Handler:    _AttachmentTypesService_UpdateAttachmentType_Handler,
		},
		{
			MethodName: "DeleteAttachmentType",
			Handler:    _AttachmentTypesService_DeleteAttachmentType_Handler,
		},
		{
			MethodName: "ListAttachmentTypes",
			Handler:    _AttachmentTypesService_ListAttachmentTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library/attachment_types/attachment_types.proto",
}
