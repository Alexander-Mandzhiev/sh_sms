// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: apps/key_rotation_history/key_rotation_history.proto

package history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RotationHistoryService_GetRotation_FullMethodName   = "/apps.secrets.history.RotationHistoryService/GetRotation"
	RotationHistoryService_ListRotations_FullMethodName = "/apps.secrets.history.RotationHistoryService/ListRotations"
)

// RotationHistoryServiceClient is the client API for RotationHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RotationHistoryServiceClient interface {
	GetRotation(ctx context.Context, in *GetRotationRequest, opts ...grpc.CallOption) (*RotationHistory, error)
	ListRotations(ctx context.Context, in *ListRotationsRequest, opts ...grpc.CallOption) (*ListRotationsResponse, error)
}

type rotationHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRotationHistoryServiceClient(cc grpc.ClientConnInterface) RotationHistoryServiceClient {
	return &rotationHistoryServiceClient{cc}
}

func (c *rotationHistoryServiceClient) GetRotation(ctx context.Context, in *GetRotationRequest, opts ...grpc.CallOption) (*RotationHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotationHistory)
	err := c.cc.Invoke(ctx, RotationHistoryService_GetRotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationHistoryServiceClient) ListRotations(ctx context.Context, in *ListRotationsRequest, opts ...grpc.CallOption) (*ListRotationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRotationsResponse)
	err := c.cc.Invoke(ctx, RotationHistoryService_ListRotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RotationHistoryServiceServer is the server API for RotationHistoryService service.
// All implementations must embed UnimplementedRotationHistoryServiceServer
// for forward compatibility.
type RotationHistoryServiceServer interface {
	GetRotation(context.Context, *GetRotationRequest) (*RotationHistory, error)
	ListRotations(context.Context, *ListRotationsRequest) (*ListRotationsResponse, error)
	mustEmbedUnimplementedRotationHistoryServiceServer()
}

// UnimplementedRotationHistoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRotationHistoryServiceServer struct{}

func (UnimplementedRotationHistoryServiceServer) GetRotation(context.Context, *GetRotationRequest) (*RotationHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRotation not implemented")
}
func (UnimplementedRotationHistoryServiceServer) ListRotations(context.Context, *ListRotationsRequest) (*ListRotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRotations not implemented")
}
func (UnimplementedRotationHistoryServiceServer) mustEmbedUnimplementedRotationHistoryServiceServer() {
}
func (UnimplementedRotationHistoryServiceServer) testEmbeddedByValue() {}

// UnsafeRotationHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RotationHistoryServiceServer will
// result in compilation errors.
type UnsafeRotationHistoryServiceServer interface {
	mustEmbedUnimplementedRotationHistoryServiceServer()
}

func RegisterRotationHistoryServiceServer(s grpc.ServiceRegistrar, srv RotationHistoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRotationHistoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RotationHistoryService_ServiceDesc, srv)
}

func _RotationHistoryService_GetRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationHistoryServiceServer).GetRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RotationHistoryService_GetRotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationHistoryServiceServer).GetRotation(ctx, req.(*GetRotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RotationHistoryService_ListRotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationHistoryServiceServer).ListRotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RotationHistoryService_ListRotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationHistoryServiceServer).ListRotations(ctx, req.(*ListRotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RotationHistoryService_ServiceDesc is the grpc.ServiceDesc for RotationHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RotationHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apps.secrets.history.RotationHistoryService",
	HandlerType: (*RotationHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRotation",
			Handler:    _RotationHistoryService_GetRotation_Handler,
		},
		{
			MethodName: "ListRotations",
			Handler:    _RotationHistoryService_ListRotations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/key_rotation_history/key_rotation_history.proto",
}
