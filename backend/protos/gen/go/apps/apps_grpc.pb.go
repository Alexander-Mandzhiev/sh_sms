// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: apps/apps.proto

package apps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppsService_Create_FullMethodName                = "/apps.v1.AppsService/Create"
	AppsService_Get_FullMethodName                   = "/apps.v1.AppsService/Get"
	AppsService_Update_FullMethodName                = "/apps.v1.AppsService/Update"
	AppsService_Delete_FullMethodName                = "/apps.v1.AppsService/Delete"
	AppsService_List_FullMethodName                  = "/apps.v1.AppsService/List"
	AppsService_GenerateSecretKey_FullMethodName     = "/apps.v1.AppsService/GenerateSecretKey"
	AppsService_RotateSecretKey_FullMethodName       = "/apps.v1.AppsService/RotateSecretKey"
	AppsService_RevokeSecretKey_FullMethodName       = "/apps.v1.AppsService/RevokeSecretKey"
	AppsService_GetKeyRotationHistory_FullMethodName = "/apps.v1.AppsService/GetKeyRotationHistory"
)

// AppsServiceClient is the client API for AppsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsServiceClient interface {
	// CRUD приложений
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*App, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*App, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*App, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Управление ключами
	GenerateSecretKey(ctx context.Context, in *GenerateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKeyResponse, error)
	RotateSecretKey(ctx context.Context, in *RotateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKeyResponse, error)
	RevokeSecretKey(ctx context.Context, in *RevokeSecretKeyRequest, opts ...grpc.CallOption) (*RevokeSecretKeyResponse, error)
	GetKeyRotationHistory(ctx context.Context, in *GetKeyRotationHistoryRequest, opts ...grpc.CallOption) (*KeyRotationHistoryResponse, error)
}

type appsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsServiceClient(cc grpc.ClientConnInterface) AppsServiceClient {
	return &appsServiceClient{cc}
}

func (c *appsServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, AppsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, AppsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, AppsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, AppsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, AppsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) GenerateSecretKey(ctx context.Context, in *GenerateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretKeyResponse)
	err := c.cc.Invoke(ctx, AppsService_GenerateSecretKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) RotateSecretKey(ctx context.Context, in *RotateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretKeyResponse)
	err := c.cc.Invoke(ctx, AppsService_RotateSecretKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) RevokeSecretKey(ctx context.Context, in *RevokeSecretKeyRequest, opts ...grpc.CallOption) (*RevokeSecretKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSecretKeyResponse)
	err := c.cc.Invoke(ctx, AppsService_RevokeSecretKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) GetKeyRotationHistory(ctx context.Context, in *GetKeyRotationHistoryRequest, opts ...grpc.CallOption) (*KeyRotationHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyRotationHistoryResponse)
	err := c.cc.Invoke(ctx, AppsService_GetKeyRotationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsServiceServer is the server API for AppsService service.
// All implementations must embed UnimplementedAppsServiceServer
// for forward compatibility.
type AppsServiceServer interface {
	// CRUD приложений
	Create(context.Context, *CreateRequest) (*App, error)
	Get(context.Context, *GetRequest) (*App, error)
	Update(context.Context, *UpdateRequest) (*App, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Управление ключами
	GenerateSecretKey(context.Context, *GenerateSecretKeyRequest) (*SecretKeyResponse, error)
	RotateSecretKey(context.Context, *RotateSecretKeyRequest) (*SecretKeyResponse, error)
	RevokeSecretKey(context.Context, *RevokeSecretKeyRequest) (*RevokeSecretKeyResponse, error)
	GetKeyRotationHistory(context.Context, *GetKeyRotationHistoryRequest) (*KeyRotationHistoryResponse, error)
	mustEmbedUnimplementedAppsServiceServer()
}

// UnimplementedAppsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppsServiceServer struct{}

func (UnimplementedAppsServiceServer) Create(context.Context, *CreateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppsServiceServer) Get(context.Context, *GetRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppsServiceServer) Update(context.Context, *UpdateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppsServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppsServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAppsServiceServer) GenerateSecretKey(context.Context, *GenerateSecretKeyRequest) (*SecretKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSecretKey not implemented")
}
func (UnimplementedAppsServiceServer) RotateSecretKey(context.Context, *RotateSecretKeyRequest) (*SecretKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateSecretKey not implemented")
}
func (UnimplementedAppsServiceServer) RevokeSecretKey(context.Context, *RevokeSecretKeyRequest) (*RevokeSecretKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSecretKey not implemented")
}
func (UnimplementedAppsServiceServer) GetKeyRotationHistory(context.Context, *GetKeyRotationHistoryRequest) (*KeyRotationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyRotationHistory not implemented")
}
func (UnimplementedAppsServiceServer) mustEmbedUnimplementedAppsServiceServer() {}
func (UnimplementedAppsServiceServer) testEmbeddedByValue()                     {}

// UnsafeAppsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsServiceServer will
// result in compilation errors.
type UnsafeAppsServiceServer interface {
	mustEmbedUnimplementedAppsServiceServer()
}

func RegisterAppsServiceServer(s grpc.ServiceRegistrar, srv AppsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppsService_ServiceDesc, srv)
}

func _AppsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_GenerateSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSecretKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).GenerateSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_GenerateSecretKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).GenerateSecretKey(ctx, req.(*GenerateSecretKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_RotateSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateSecretKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).RotateSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_RotateSecretKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).RotateSecretKey(ctx, req.(*RotateSecretKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_RevokeSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSecretKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).RevokeSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_RevokeSecretKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).RevokeSecretKey(ctx, req.(*RevokeSecretKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_GetKeyRotationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRotationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).GetKeyRotationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_GetKeyRotationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).GetKeyRotationHistory(ctx, req.(*GetKeyRotationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppsService_ServiceDesc is the grpc.ServiceDesc for AppsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apps.v1.AppsService",
	HandlerType: (*AppsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppsService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppsService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppsService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AppsService_List_Handler,
		},
		{
			MethodName: "GenerateSecretKey",
			Handler:    _AppsService_GenerateSecretKey_Handler,
		},
		{
			MethodName: "RotateSecretKey",
			Handler:    _AppsService_RotateSecretKey_Handler,
		},
		{
			MethodName: "RevokeSecretKey",
			Handler:    _AppsService_RevokeSecretKey_Handler,
		},
		{
			MethodName: "GetKeyRotationHistory",
			Handler:    _AppsService_GetKeyRotationHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/apps.proto",
}
