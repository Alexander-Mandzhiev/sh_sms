// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: apps/clients_apps/clients_apps.proto

package client_apps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientsAppService_CreateClientApp_FullMethodName = "/apps.client_apps.ClientsAppService/CreateClientApp"
	ClientsAppService_GetClientApp_FullMethodName    = "/apps.client_apps.ClientsAppService/GetClientApp"
	ClientsAppService_UpdateClientApp_FullMethodName = "/apps.client_apps.ClientsAppService/UpdateClientApp"
	ClientsAppService_DeleteClientApp_FullMethodName = "/apps.client_apps.ClientsAppService/DeleteClientApp"
	ClientsAppService_ListClientsApp_FullMethodName  = "/apps.client_apps.ClientsAppService/ListClientsApp"
)

// ClientsAppServiceClient is the client API for ClientsAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientsAppServiceClient interface {
	CreateClientApp(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ClientApp, error)
	GetClientApp(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*ClientApp, error)
	UpdateClientApp(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ClientApp, error)
	DeleteClientApp(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListClientsApp(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type clientsAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsAppServiceClient(cc grpc.ClientConnInterface) ClientsAppServiceClient {
	return &clientsAppServiceClient{cc}
}

func (c *clientsAppServiceClient) CreateClientApp(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ClientApp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientApp)
	err := c.cc.Invoke(ctx, ClientsAppService_CreateClientApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsAppServiceClient) GetClientApp(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*ClientApp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientApp)
	err := c.cc.Invoke(ctx, ClientsAppService_GetClientApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsAppServiceClient) UpdateClientApp(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ClientApp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientApp)
	err := c.cc.Invoke(ctx, ClientsAppService_UpdateClientApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsAppServiceClient) DeleteClientApp(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ClientsAppService_DeleteClientApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsAppServiceClient) ListClientsApp(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ClientsAppService_ListClientsApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsAppServiceServer is the server API for ClientsAppService service.
// All implementations must embed UnimplementedClientsAppServiceServer
// for forward compatibility.
type ClientsAppServiceServer interface {
	CreateClientApp(context.Context, *CreateRequest) (*ClientApp, error)
	GetClientApp(context.Context, *IdentifierRequest) (*ClientApp, error)
	UpdateClientApp(context.Context, *UpdateRequest) (*ClientApp, error)
	DeleteClientApp(context.Context, *IdentifierRequest) (*DeleteResponse, error)
	ListClientsApp(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedClientsAppServiceServer()
}

// UnimplementedClientsAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientsAppServiceServer struct{}

func (UnimplementedClientsAppServiceServer) CreateClientApp(context.Context, *CreateRequest) (*ClientApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientApp not implemented")
}
func (UnimplementedClientsAppServiceServer) GetClientApp(context.Context, *IdentifierRequest) (*ClientApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientApp not implemented")
}
func (UnimplementedClientsAppServiceServer) UpdateClientApp(context.Context, *UpdateRequest) (*ClientApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientApp not implemented")
}
func (UnimplementedClientsAppServiceServer) DeleteClientApp(context.Context, *IdentifierRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClientApp not implemented")
}
func (UnimplementedClientsAppServiceServer) ListClientsApp(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientsApp not implemented")
}
func (UnimplementedClientsAppServiceServer) mustEmbedUnimplementedClientsAppServiceServer() {}
func (UnimplementedClientsAppServiceServer) testEmbeddedByValue()                           {}

// UnsafeClientsAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientsAppServiceServer will
// result in compilation errors.
type UnsafeClientsAppServiceServer interface {
	mustEmbedUnimplementedClientsAppServiceServer()
}

func RegisterClientsAppServiceServer(s grpc.ServiceRegistrar, srv ClientsAppServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientsAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientsAppService_ServiceDesc, srv)
}

func _ClientsAppService_CreateClientApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsAppServiceServer).CreateClientApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsAppService_CreateClientApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsAppServiceServer).CreateClientApp(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsAppService_GetClientApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsAppServiceServer).GetClientApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsAppService_GetClientApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsAppServiceServer).GetClientApp(ctx, req.(*IdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsAppService_UpdateClientApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsAppServiceServer).UpdateClientApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsAppService_UpdateClientApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsAppServiceServer).UpdateClientApp(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsAppService_DeleteClientApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsAppServiceServer).DeleteClientApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsAppService_DeleteClientApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsAppServiceServer).DeleteClientApp(ctx, req.(*IdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsAppService_ListClientsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsAppServiceServer).ListClientsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsAppService_ListClientsApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsAppServiceServer).ListClientsApp(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientsAppService_ServiceDesc is the grpc.ServiceDesc for ClientsAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientsAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apps.client_apps.ClientsAppService",
	HandlerType: (*ClientsAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClientApp",
			Handler:    _ClientsAppService_CreateClientApp_Handler,
		},
		{
			MethodName: "GetClientApp",
			Handler:    _ClientsAppService_GetClientApp_Handler,
		},
		{
			MethodName: "UpdateClientApp",
			Handler:    _ClientsAppService_UpdateClientApp_Handler,
		},
		{
			MethodName: "DeleteClientApp",
			Handler:    _ClientsAppService_DeleteClientApp_Handler,
		},
		{
			MethodName: "ListClientsApp",
			Handler:    _ClientsAppService_ListClientsApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/clients_apps/clients_apps.proto",
}
