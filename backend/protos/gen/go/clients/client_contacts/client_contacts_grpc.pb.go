// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: clients/client_contacts/client_contacts.proto

package client_contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientContactService_CreateContact_FullMethodName = "/clients.client_contacts.ClientContactService/CreateContact"
	ClientContactService_GetContact_FullMethodName    = "/clients.client_contacts.ClientContactService/GetContact"
	ClientContactService_UpdateContact_FullMethodName = "/clients.client_contacts.ClientContactService/UpdateContact"
	ClientContactService_DeleteContact_FullMethodName = "/clients.client_contacts.ClientContactService/DeleteContact"
	ClientContactService_ListContacts_FullMethodName  = "/clients.client_contacts.ClientContactService/ListContacts"
)

// ClientContactServiceClient is the client API for ClientContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientContactServiceClient interface {
	CreateContact(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Contact, error)
	GetContact(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Contact, error)
	UpdateContact(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Contact, error)
	DeleteContact(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListContacts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type clientContactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientContactServiceClient(cc grpc.ClientConnInterface) ClientContactServiceClient {
	return &clientContactServiceClient{cc}
}

func (c *clientContactServiceClient) CreateContact(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Contact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contact)
	err := c.cc.Invoke(ctx, ClientContactService_CreateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientContactServiceClient) GetContact(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Contact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contact)
	err := c.cc.Invoke(ctx, ClientContactService_GetContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientContactServiceClient) UpdateContact(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Contact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contact)
	err := c.cc.Invoke(ctx, ClientContactService_UpdateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientContactServiceClient) DeleteContact(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ClientContactService_DeleteContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientContactServiceClient) ListContacts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ClientContactService_ListContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientContactServiceServer is the server API for ClientContactService service.
// All implementations must embed UnimplementedClientContactServiceServer
// for forward compatibility.
type ClientContactServiceServer interface {
	CreateContact(context.Context, *CreateRequest) (*Contact, error)
	GetContact(context.Context, *GetRequest) (*Contact, error)
	UpdateContact(context.Context, *UpdateRequest) (*Contact, error)
	DeleteContact(context.Context, *DeleteRequest) (*DeleteResponse, error)
	ListContacts(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedClientContactServiceServer()
}

// UnimplementedClientContactServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientContactServiceServer struct{}

func (UnimplementedClientContactServiceServer) CreateContact(context.Context, *CreateRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedClientContactServiceServer) GetContact(context.Context, *GetRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedClientContactServiceServer) UpdateContact(context.Context, *UpdateRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedClientContactServiceServer) DeleteContact(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedClientContactServiceServer) ListContacts(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContacts not implemented")
}
func (UnimplementedClientContactServiceServer) mustEmbedUnimplementedClientContactServiceServer() {}
func (UnimplementedClientContactServiceServer) testEmbeddedByValue()                              {}

// UnsafeClientContactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientContactServiceServer will
// result in compilation errors.
type UnsafeClientContactServiceServer interface {
	mustEmbedUnimplementedClientContactServiceServer()
}

func RegisterClientContactServiceServer(s grpc.ServiceRegistrar, srv ClientContactServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientContactServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientContactService_ServiceDesc, srv)
}

func _ClientContactService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientContactServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientContactService_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientContactServiceServer).CreateContact(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientContactService_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientContactServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientContactService_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientContactServiceServer).GetContact(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientContactService_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientContactServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientContactService_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientContactServiceServer).UpdateContact(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientContactService_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientContactServiceServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientContactService_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientContactServiceServer).DeleteContact(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientContactService_ListContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientContactServiceServer).ListContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientContactService_ListContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientContactServiceServer).ListContacts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientContactService_ServiceDesc is the grpc.ServiceDesc for ClientContactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientContactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clients.client_contacts.ClientContactService",
	HandlerType: (*ClientContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _ClientContactService_CreateContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _ClientContactService_GetContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _ClientContactService_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ClientContactService_DeleteContact_Handler,
		},
		{
			MethodName: "ListContacts",
			Handler:    _ClientContactService_ListContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clients/client_contacts/client_contacts.proto",
}
